from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql import func, text  # –î–æ–±–∞–≤–ª–µ–Ω `text` –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
from sqlalchemy.future import select
from sqlalchemy import insert
from app.models import User, Chat, Message, chat_members, message_readers
from app.schemas import UserCreate, MessageCreate, ChatCreate
from app.websocket import manager

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user(db: AsyncSession, user: UserCreate):
    new_user = User(
        name=user.name,
        email=user.email,
        password=user.password
    )
    db.add(new_user)
    try:
        await db.commit()
        await db.refresh(new_user)
        return new_user
    except IntegrityError:
        await db.rollback()
        return None

# üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
async def get_user_by_email(db: AsyncSession, email: str):
    result = await db.execute(select(User).where(User.email == email))
    return result.scalars().first()

async def create_message(db: AsyncSession, chat_id: int, sender_id: int, text: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    existing_message = await db.execute(
        select(Message)
        .where(Message.chat_id == chat_id, Message.sender_id == sender_id, Message.text == text)
    )
    if existing_message.scalars().first():
        return {"error": "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}

    new_message = Message(chat_id=chat_id, sender_id=sender_id, text=text, read=False)
    db.add(new_message)
    try:
        await db.commit()
        await db.refresh(new_message)
        return new_message
    except IntegrityError:
        await db.rollback()
        return {"error": "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
async def create_chat(db: AsyncSession, chat: ChatCreate):
    new_chat = Chat(name=chat.name, chat_type=chat.chat_type)
    db.add(new_chat)
    await db.commit()
    await db.refresh(new_chat)
    return new_chat

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
async def add_chat_member(db: AsyncSession, chat_id: int, user_id: int):
    chat = await db.get(Chat, chat_id)
    user = await db.get(User, user_id)

    if not chat:
        return {"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    if not user:
        return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç
    result = await db.execute(
        select(chat_members).where(
            (chat_members.c.chat_id == chat_id) & (chat_members.c.user_id == user_id)
        )
    )
    if result.fetchone():
        return {"message": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"}

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    stmt = insert(chat_members).values(chat_id=chat_id, user_id=user_id)
    await db.execute(stmt)
    await db.commit()

    return {"message": f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}"}

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
async def get_chat_members(db: AsyncSession, chat_id: int):
    result = await db.execute(
        select(User.id, User.name)
        .join(chat_members, User.id == chat_members.c.user_id)
        .where(chat_members.c.chat_id == chat_id)
    )
    members = result.fetchall()
    return {"chat_id": chat_id, "members": [{"id": user.id, "name": user.name} for user in members]}

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_messages(db: AsyncSession, chat_id: int, limit: int = 10, offset: int = 0):
    result = await db.execute(
        select(Message)
        .filter(Message.chat_id == chat_id)
        .order_by(Message.timestamp)
        .limit(limit)
        .offset(offset)
    )
    return result.scalars().all()


# ‚úÖ –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
async def mark_message_as_read(db: AsyncSession, message_id: int, user_email: str):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await db.execute(
        text("SELECT sender_id, chat_id FROM messages WHERE id = :message_id"),
        {"message_id": message_id}
    )
    message_data = message.fetchone()

    if not message_data:
        return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    
    sender_id, chat_id = message_data  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ —á–∞—Ç ID

    # 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ email
    user = await db.execute(text("SELECT id FROM users WHERE email = :email"), {"email": user_email})
    user_id = user.scalar()

    if not user_id:
        return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    already_read = await db.execute(
        text("SELECT 1 FROM message_readers WHERE message_id = :message_id AND user_id = :user_id"),
        {"message_id": message_id, "user_id": user_id}
    )

    if already_read.fetchone():
        return {"message": f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"}

    # 4Ô∏è‚É£ –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await db.execute(
        text("""
            INSERT INTO message_readers (message_id, user_id)
            VALUES (:message_id, :user_id)
            ON CONFLICT DO NOTHING
        """),
        {"message_id": message_id, "user_id": user_id}
    )
    await db.commit()

    # 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
    total_members = await db.execute(
        text("SELECT COUNT(*) FROM chat_members WHERE chat_id = :chat_id AND user_id != :sender_id"),
        {"chat_id": chat_id, "sender_id": sender_id}
    )
    total_members = total_members.scalar()  # –£–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞

    # 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏
    read_count = await db.execute(
        text("SELECT COUNT(*) FROM message_readers WHERE message_id = :message_id"),
        {"message_id": message_id}
    )
    read_count = read_count.scalar()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è): {total_members}, –ü—Ä–æ—á–∏—Ç–∞–ª–∏: {read_count}")

    # 7Ô∏è‚É£ –ï—Å–ª–∏ **–≤—Å–µ, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è** –ø—Ä–æ—á–ª–∏ ‚Üí –û—Ç–º–µ—á–∞–µ–º "–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
    if read_count == total_members:
        await db.execute(
            text("UPDATE messages SET read = TRUE WHERE id = :message_id"),
            {"message_id": message_id}
        )
        await db.commit()

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!")
        return {"message": f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!"}

    return {"message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"}