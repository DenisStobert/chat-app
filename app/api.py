from fastapi import Header, status, APIRouter, Depends, WebSocket, WebSocketDisconnect, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from fastapi.security import OAuth2PasswordRequestForm
from jose import jwt, JWTError
import ast
from sqlalchemy.sql import text

from app.auth import SECRET_KEY, ALGORITHM, verify_password, create_access_token, get_password_hash
from app.db import get_db, SessionLocal
from app.crud import mark_message_as_read, get_messages, create_chat, add_chat_member, get_chat_members, create_message, create_user, get_user_by_email
from app.websocket import manager
from app.schemas import MessageCreate, UserCreate, ChatCreate
from app.models import Message, User, Chat

router = APIRouter()

### üöÄ **WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ**
@router.websocket("/ws/{user_id}/{chat_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: int, chat_id: int):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —á–∞—Ç—É {chat_id}")
    
    async with SessionLocal() as db:
        members = await get_chat_members(db, chat_id)
        if not any(member["id"] == user_id for member in members["members"]):
            await websocket.close(code=1008)  # –ö–æ–¥ 1008 - policy violation
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {chat_id}. –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket.")
            return

    await manager.connect(websocket, user_id)

    try:
        while True:
            data = await websocket.receive_text()
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {data}")

            async with SessionLocal() as db:
                new_message = await create_message(db, chat_id, user_id, data)

                if isinstance(new_message, dict) and "error" in new_message:
                    await manager.send_message(user_id, new_message["error"])
                    continue  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

                members = await get_chat_members(db, chat_id)
                for member in members["members"]:
                    if member["id"] != user_id:
                        await manager.send_message(member["id"], f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {data}")

                await manager.send_message(user_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ '{data}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except WebSocketDisconnect:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        manager.disconnect(user_id, websocket)

### üìú **–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π**
@router.get("/history/{chat_id}")
async def get_chat_history(chat_id: int, db: AsyncSession = Depends(get_db)):
    return await get_messages(db, chat_id)

### ‚úÖ **–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π**
@router.put("/message/read/{message_id}")
async def mark_message_read(
    message_id: int, 
    db: AsyncSession = Depends(get_db),
    authorization: str = Header(None)
):
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header is missing")

    try:
        token = authorization.split(" ")[1]  # –£–±–∏—Ä–∞–µ–º "Bearer"
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])

        # ‚úÖ –¢–µ–ø–µ—Ä—å `sub` ‚Äî —ç—Ç–æ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = payload.get("sub")
        if not user_email:
            raise HTTPException(status_code=401, detail="Invalid token structure")

    except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
        raise HTTPException(status_code=401, detail="Invalid or expired token")

    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
    result = await mark_message_as_read(db, message_id, user_email)  

    if "error" not in result:
        async with SessionLocal() as db:
            message = await db.get(Message, message_id)
            
            if message:
                # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
                total_members = await db.execute(
                    text("SELECT COUNT(*) FROM chat_members WHERE chat_id = :chat_id AND user_id != :sender_id"),
                    {"chat_id": message.chat_id, "sender_id": message.sender_id}
                )
                total_members = total_members.scalar()

                # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏
                read_count = await db.execute(
                    text("SELECT COUNT(*) FROM message_readers WHERE message_id = :message_id"),
                    {"message_id": message_id}
                )
                read_count = read_count.scalar()

                # 3Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ **–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if read_count == total_members:
                    await manager.send_message(message.sender_id, f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!")

    return result

### üîπ **–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞**
@router.post("/chats")
async def create_new_chat(chat: ChatCreate, db: AsyncSession = Depends(get_db)):
    new_chat = await create_chat(db, chat)
    return {"message": "‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω", "chat_id": new_chat.id}

### üë• **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç**
@router.post("/chats/{chat_id}/members")
async def add_user_to_chat(chat_id: int, user_id: int, db: AsyncSession = Depends(get_db)):
    return await add_chat_member(db, chat_id, user_id)

### üîç **–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞**
@router.get("/chats/{chat_id}/members")
async def get_chat_users(chat_id: int, db: AsyncSession = Depends(get_db)):
    return await get_chat_members(db, chat_id)

# üîê **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
@router.post("/register")
async def register(user: UserCreate, db: AsyncSession = Depends(get_db)):
    existing_user = await get_user_by_email(db, user.email)
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already registered")

    user.password = get_password_hash(user.password)
    new_user = await create_user(db, user)
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"}

# üîë **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)**
@router.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    user = await get_user_by_email(db, form_data.username)
    if not user or not verify_password(form_data.password, user.password):
        raise HTTPException(status_code=400, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token = create_access_token({"sub": user.email})
    return {"access_token": token, "token_type": "bearer"}
